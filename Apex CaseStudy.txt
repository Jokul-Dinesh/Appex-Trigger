public class ApexCaseStudy {
    
    //Casestudy1
    //Create a variable that stores the current year. Do not hardcode current year; instead use formula.
    Public static void CurrentYear()
    {
        Date Curdate =Date.Today();
        integer Year = Curdate.Year();
        System.debug('Current Year is '+Year);
        
    }
    
    //Casestudy2
    //Create a variable to store logged-in-username, Locale, Preferred User Interface(Classic or Lightning Experience).
    // do not hardcode values ; instead, consider using userInfo class.
    Public static void Userdetails()
    {
        String UserName = Userinfo.getName();
        String Locale = Userinfo.getLocale();
        String UItheme = Userinfo.getUiTheme();
        String UIthemeDisplayed = Userinfo.getUiThemeDisplayed();
        
        System.debug('User Name = '+UserName);
        System.debug('Locale of User = '+Locale);
        System.debug('UI theame of User = '+UItheme);
        System.debug('UIthemeDisplayed of User = '+UIthemeDisplayed);
    }
    
    //Casestudy3
    //Create a variable to store the length of logged-in-username.
    //consider using String class
    //String myStr = 'abcdefâ€™;
    //Integer result = myStr.length();
    Public static void UserNameLength()
    {
        String UserName = Userinfo.getName();
        Integer UserNameLength = UserName.length() ;
        System.debug(UserName);
        system.debug(UserNameLength);
    }
    
    //Casestudy4
    //Create a variable that will store first 5 characters of logged-in-user's last name. Consider using String class
    //substring
    Public static void LastName()
    {
        
        String UserName = Userinfo.getName();
        String LastName = Userinfo.getLastName();
        Integer UserNameLength = UserName.length();
        System.debug(UserName);
        system.debug(UserNameLength);
        System.debug(LastName.substring(0,5));
    }
    
    //Casestudy5
    //Create a variable that will store Start date of the current week. consider using date class.
    //date myDate = date.today();
    //date weekStart = myDate.toStartofWeek();
    Public static void StartOfWeek()
    {
        date CurDate = Date.today();
        Date StartDate  = CurDate.toStartOfWeek();
        System.debug(StartDate);    
    }
    
    //Casestudy6
    //Write a apex script to load 100 account records at once with account name test01, test02, test03,.....test100.
    Public static void insertHundredRecords()
    {
        List<Account> Acclst = new List<Account>();
        For (integer X=1; X<=100; X++)
        {
            Account Acc = new Account();
            Acc.Name = 'Test'+X;
            Acc.BillingState = 'CA';
            Acclst.add(Acc);    
        }
    try 
    {
        insert Acclst;
    } 
    catch(DmlException e) {
        System.debug('The following exception has occurred: ' + e.getMessage());
    }        
    }

    
    //Casestudy7
    //Write a apex script to update all accounts which has billing state from CA to FL.
    Public static void UpdatebillingState()
    {
        list<Account> Acclst = New List<Account>([Select id , Name, BillingState from Account where BillingState = 'CA']);
        for(Account Acc : Acclst)
        {
            Acc.BillingState = 'FL';
        }
    try 
    {
        update Acclst;
    } 
    catch(DmlException e) {
        System.debug('The following exception has occurred: ' + e.getMessage());
    }
    }
    
    
    //Casestudy8
    //Write a apex script/class that should be given a sentence " She saw a see saw" as a input and it should display below output in debug log.
    //String should not be hardcoded in script. it should works for any sentence
    Public static void WordCount()
    {
        String Sentence = 'She saw a see saw';
        Map<String , Integer> Countmap = new Map<String , Integer>();
        system.debug(sentence.toLowerCase());
        for(string str1 : sentence.split(' '))
        {
            if(Countmap.containskey(str1))
            {
                integer wordcount = Countmap.get(str1);
                wordcount++;
                Countmap.put(str1,wordcount);
            }
            else 
            {
                Countmap.put(Str1,1);
            }
        }
        for(String Str2 : Countmap.keyset())
        {
            system.debug(Str2+' appears '+ Countmap.get(Str2)+' times');
        }
        
    }
    
    
    //Casestudy9
    //Write a SOSL query to look for the name Arun Kumar or Aravind in the name field of a lead or contact and return the name and phone number.
    //if an opportunity is called Arun Kumar or Aravind, the opportunity should not be returned.
    Public static void SOSLquery()
    {
        List<List<Sobject>> Listobj = [Find 'Arun kumar OR Aravind' 
                                       In NAME FIELDS returning Lead(Name,Phone) , Contact(LastName,Phone)];
        List<Lead> Leadlst = Listobj[0];
        for( Lead Leadrec :Leadlst)
        {
            System.debug(Leadrec.Name);
            System.debug(Leadrec.Phone);
        }
        List<Contact>contactlst = Listobj[1];
        for(Contact Contactrec : Contactlst)
        {
            System.debug(Contactrec.LastName);
            System.debug(contactrec.phone);
        }
    }
    
    //Casestudy10
    //Write a SOQL query returns the name for all the accounts, and for each account, the last name of each contact.
    Public static void SOQLquery()
    {
        List<Account> Acclst = [select id, Name, (Select Id, lastName from Contacts) from Account] ;
        for(account Acc :Acclst)
        {
            System.debug('=====================================');
            System.debug('Account Name = '+Acc.Name);
            for (Contact Con: Acc.contacts)
            {
                System.debug('Contact LastName = '+con.LastName);
            }  
        }
    }
    
    //Casestudy11
    //Write a SOQL query to count the total number of opportunities records.
    Public static void SOQLqueryCount()
    {
        integer Count = [select 
                         Count() from Opportunity];
        system.debug('Count of all opportunities is '+ Count);
        
        List<Opportunity> opplst= [Select 
                                   Id, name from Opportunity];
        system.debug('Count of all opportunities is '+ Opplst.size());
		system.debug('====================================================');

        
    }
    
    
    //Casestudy12
    //Create an account called 'AC02'. Create 2 opportunities record under the account with field values.
    //Opp1  ---> 345
    //Opp2 ---> 567
    //Write a soql query to get the sum of opportunity amount of account Ac02.
    public static void AggregateResult()
    {
        Account acc=new account();
        acc.Name='Ac06';
        insert acc;
        list<opportunity> opplist=new list<opportunity>();
        
        opportunity opp1 = new opportunity();
        opp1.Name='opp1';
        opp1.Amount=345;
        opp1.StageName='Prospecting';
        opp1.CloseDate=Date.today();
        opp1.AccountId=acc.Id;
        
        opportunity opp2 = new opportunity();
        opp2.Name='opp2';
        opp2.Amount=567;
        opp2.StageName='Prospecting';
        opp2.CloseDate=Date.today();
        opp2.AccountId=acc.Id;
        
        opplist.add(opp1);
        opplist.add(opp2);
        
        insert opplist;
        
        list<AggregateResult> oppdetails =[ select
                                           sum(Amount) From Opportunity
                                           where Accountid=:acc.id];
        system.debug(oppdetails);
        
    }
    
    
    //Casestudy13
    //Write a soql query to return the list of stage name and the total number of opportunity records in each stage,
    public static void GroupbyStageName()
    {
        List <AggregateResult> Oppcount = [Select 
                                           Count(Id)Countofid, StageName from Opportunity
                                           group By StageName];
        For(AggregateResult  Stagecount : Oppcount)
        {
            
            system.debug( (Stagecount.get('StageName'))  + ' ' + (Stagecount.get('Countofid')) );
        }
        
    }
    
    
    
}